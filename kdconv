#!/bin/sh
#
# PDF optimizer for Kindle2/DX.
#
# Copyright (c) 2010, MIYOKAWA, Nobuyoshi
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHORS ''AS IS'' AND ANY EXPRESS
#  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
#  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
#  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
#  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
#  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
#  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

VERSION=1.0.3

COPY=${KDCONV_COPY:-0}
OVERWRITE=${KDCONV_OVERWRITE:-0}
EJECT=${KDCONV_EJECT:-0}
DEVICEDOCPATH=${KDCONV_KINDLEDOCPATH:-} # obsolete
DEVICEDOCPATH=${KDCONV_DEVICEDOCPATH:-}
DX=${KDCONV_DX:-0}		# obsolete
DEVICETYPE=${KDCONV_DEVICETYPE:-kindle}
KEEPWORKDIR=${KDCONV_KEEPWORKDIR:-0}
TRIM=${KDCONV_TRIM:-0}
DEBUG=${KDCONV_DEBUG:-0}

GS_DPI=300
PDF_DPI=96
JOINPY=/System/Library/Automator/Combine\ PDF\ Pages.action/Contents/Resources/join.py

KINDLE_PAPERSIZE_X=584
KINDLE_PAPERSIZE_Y=754
KINDLE_DEVICEPATH=/Volumes/Kindle/documents
KINDLEDX_PAPERSIZE_X=784
KINDLEDX_PAPERSIZE_Y=1142
KINDLEDX_DEVICEPATH=/Volumes/Kindle/documents
SONYREADER_PAPERSIZE_X=560
SONYREADER_PAPERSIZE_Y=735
SONYREADER_DEVICEPATH=/Volumes/READER

OPTIONS="a:cef:op:tvDKhd"
PROGNAME=`basename $0`
PDFTK=1

WORKDIR=''
SRCFILE=''
DSTFILE=''
TITLE=''
AUTHOR=''

usage()
{
    cat<<EOM 1>&2
usage: ${PROGNAME} [OPTION] input-pdf output-pdf

EOM
    if [ ${PDFTK} -eq 1 ]; then
	cat<<EOM 1>&2
  -a <AUTHOR>       set PDF author
EOM
    fi
    cat<<EOM 1>&2
  -c                copy if convert finished.
  -e                eject if copy finished.
  -f <DEVICEFORMAT> set format type. {kindle|kindledx|sonyreader}
  -o                overwrite output-pdf if already exits.
  -p <DEVICEDOCDIR> Kindle doc directory path.
  -t                try to trim extra space.
  -v                show version
EOM
}

version()
{
    cat <<EOM
${PROGNAME} ${VERSION}
Copyright (c) 2010, MIYOKAWA, Nobuyoshi
EOM
}

err()
{
    local _status=$1; shift
    echo "${PROGNAME}: $@" 1>&2
    exit ${_status}
}

warn()
{
    echo "${PROGNAME}: $@" 1>&2
}

create_workdir()
{
    WORKDIR=`mktemp -d -t ${PROGNAME}.XXXXXXXXXX`
    [ $? -eq 0 ] || err 1 "Can't create temp dir"
}

cleanup()
{
    if [ ${KEEPWORKDIR} -eq 0 ]; then
	rm -rf ${WORKDIR}
    fi
}

prepare()
{
    PDFTK=1
    if ! /usr/bin/which pdftk > /dev/null ; then
	PDFTK=0
	OPTIONS=`echo ${OPTIONS} | sed 's/a//'`
    fi
    if [ ${DX} -eq 1 ]; then
	DEVICETYPE="kindledx"
    fi
}

parseopt()
{
    local _dstbase
    while getopts ${OPTIONS} opt "$@"; do
	case ${opt} in
	    a)
		AUTHOR="${OPTARG}"
		;;
            c)
		COPY=1
		;;
            e)
		EJECT=1
		;;
            o)
		OVERWRITE=1
		;;
            p)
		DEVICEDOCPATH="${OPTARG}"
		;;
            t)
		TRIM=1
		;;
            f)
		DEVICETYPE="${OPTARG}"
		;;
            v)
		version
		exit 0
		;;
            D)
		DEBUG=1
		;;
            K)
		KEEPWORKDIR=1
		;;
            d)
		warn "Warning: -d option is obsolete.  try to use -f"
		DEVICETYPE="kindledx"
		;;
	    *)
		usage; exit 0
		;;
	esac
    done
    shift $((${OPTIND}-1))

    if [ $# != 2 ]; then
	usage
        exit 2
    fi

    case ${DEVICETYPE} in
	kindle)
	    PAPERSIZE_X=${KINDLE_PAPERSIZE_X}
	    PAPERSIZE_Y=${KINDLE_PAPERSIZE_Y}
	    [ ${DEVICEDOCPATH}x = x ] && DEVICEDOCPATH=${KINDLE_DEVICEPATH}
	    ;;
	kindledx)
	    PAPERSIZE_X=${KINDLEDX_PAPERSIZE_X}
	    PAPERSIZE_Y=${KINDLEDX_PAPERSIZE_Y}
	    [ ${DEVICEDOCPATH}x = x ] && DEVICEDOCPATH=${KINDLEDX_DEVICEPATH}
	    ;;
	sonyreader)
	    PAPERSIZE_X=${SONYREADER_PAPERSIZE_X}
	    PAPERSIZE_Y=${SONYREADER_PAPERSIZE_Y}
	    [ ${DEVICEDOCPATH}x = x ] && DEVICEDOCPATH=${SONYREADER_DEVICEPATH}
	    ;;
	*)
	    err 1 "Unsupported format type: ${DEVICETYPE}"
	    ;;
    esac

    SRCFILE=$(cd "$(dirname "${1}")" && pwd)/$(basename "${1}")
    [ -e "${SRCFILE}" ] || err 1 "No such file: ${SRCFILE}"
    DSTFILE=$(cd "$(dirname "${2}")" && pwd)/$(basename "${2}")
    [ ${OVERWRITE} -eq 1 -o ! -e "${DSTFILE}" ] \
      || err 1 "Already exist: ${DSTFILE}"
    if [ ${COPY} -eq 1 ]; then
	if [ ! -d "${DEVICEDOCPATH}" ]; then
	    warn "Warning: Kindle is not connected."
	    COPY=0
	else
            DEVICEDOCPATH=$(cd "$DEVICEDOCPATH" && pwd)
	fi
    fi

    _dstbase=$(basename "${2}")
    TITLE=${_dstbase%.pdf}
}

slice()
{
    gs \
	-dSAFER \
	-dBATCH \
	-dNOPAUSE \
	-r${GS_DPI} \
	-sDEVICE=jpeg \
	-dTextAlphaBits=4 \
	-dGraphicsAlphaBits=4 \
	-dMaxStripSize=8192 \
	-sOutputFile="${PROGNAME}.%04d.jpg" \
	"${SRCFILE}"
}

conv()
{
    local _papersize="${PAPERSIZE_X}x${PAPERSIZE_Y}" \
          _opt=""
    [ ${TRIM} -eq 0 ] || _opt="-fuzz 45% -trim +repage"

    for i in *.jpg; do
	/bin/echo -n '.'
	out=${i%.jpg}.pdf
	rm -f ${out}
	convert \
	    ${i} \
	    -type Grayscale \
	    -colorspace Gray \
	    -density ${PDF_DPI} \
	    ${_opt} \
	    -modulate 110 -gamma 0.3/0.3/0.3 \
	    -resize ${_papersize} \
	    -gravity center \
	    -extent ${_papersize} \
	    -fill gray \
	    -draw 'point 0,0' \
	    -draw "point $((${PAPERSIZE_X}-1)),$((${PAPERSIZE_Y}-1))" \
	    ${out}
    done
    echo ''
}

join()
{
    echo 'concatinating pdf pages.'

    if [ ${PDFTK} -eq 1 ]; then
	cat <<EOF>PDF_INFO
InfoKey: Title
InfoValue: ${TITLE}
InfoKey: Author
InfoValue: ${AUTHOR}
EOF
	pdftk *.pdf output - | pdftk - update_info PDF_INFO output - > "${DSTFILE}"
    else
	"${JOINPY}" --output "${DSTFILE}" *.pdf
    fi
}

copy()
{
    local _target=`basename ${DSTFILE}`

    [ ${COPY} -eq 1 ] || return
    if [ ${OVERWRITE} -eq 0 -a -e "${DEVICEDOCPATH}/${_target}" ]; then
	warn "Warning: Already exist on Kindle: ${_target}" 1>&2
	return
    fi

    cp "${DSTFILE}" "${DEVICEDOCPATH}"/
    [ ${EJECT} -eq 1 ] || return
    diskutil eject /Volumes/Kindle
}

d()
{
    [ ${DEBUG} -eq 1 ] || return

    cat<<EOF 1>&2
SRCFILE: ${SRCFILE}
DSTFILE: ${DSTFILE}
WORKDIR: ${WORKDIR}
PAPERSIZE_X: ${PAPERSIZE_X}
PAPERSIZE_Y: ${PAPERSIZE_Y}
TITLE: ${TITLE}
AUTHOR: ${AUTHOR}
COPY: ${COPY}
EJECT: ${EJECT}
OVERWRITE: ${OVERWRITE}
KEEPWORKDIR: ${KEEPWORKDIR}
DEVICEDOCPATH: ${DEVICEDOCPATH}
PDFTK: ${PDFTK}
EOF
}

main()
{
    prepare
    parseopt "$@"
    create_workdir
    d

    trap 'cleanup; exit 1' 1 2 3 15
    (cd ${WORKDIR}; \
	slice; \
	conv; \
	join; \
	copy; \
    )

    cleanup
}

main "$@"

# EOF
