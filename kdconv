#!/bin/sh
#set -o xtrace
# Copyright (c) 2010-2011 MIYOKAWA, Nobuyoshi.  All rights reserved.
# Copyright (c) 2012-2013 Shin HATTORI. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHORS ''AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
# OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
# OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

VERSION=1.0.4-dirtyfork-0.1

BILEVEL=${KDCONV_BILEVEL:-0}
COPY=${KDCONV_COPY:-0}
OVERWRITE=${KDCONV_OVERWRITE:-0}
EJECT=${KDCONV_EJECT:-0}
DEVICEDOCPATH=${KDCONV_KINDLEDOCPATH:-} # obsolete
DEVICEDOCPATH=${KDCONV_DEVICEDOCPATH:-}
DX=${KDCONV_DX:-0}		# obsolete
DEVICETYPE=${KDCONV_DEVICETYPE:-sonyreader}
KEEPWORKDIR=${KDCONV_KEEPWORKDIR:-0}
TRIM=${KDCONV_TRIM:-1}
DEBUG=${KDCONV_DEBUG:-0}
OCR=0

GS_DPI=300
PDF_DPI=96
JOINPY=/System/Library/Automator/Combine\ PDF\ Pages.action/Contents/Resources/join.py

KINDLE_PAPERSIZE_X=584
KINDLE_PAPERSIZE_Y=754
KINDLE_DEVICEPATH=/Volumes/Kindle/documents
KINDLEDX_PAPERSIZE_X=784
KINDLEDX_PAPERSIZE_Y=1142
KINDLEDX_DEVICEPATH=/Volumes/Kindle/documents
SONYREADER_PAPERSIZE_X=560
SONYREADER_PAPERSIZE_Y=735
SONYREADER_DEVICEPATH=/Volumes/READER
PRS_PAPERSIZE_X=584
PRS_PAPERSIZE_Y=754
PRS_DEVICEPATH=/Volumes/READER
PAPERWHITE_PAPERSIZE_X=658
PAPERWHITE_PAPERSIZE_Y=905

OPTIONS="a:bcef:op:tvDKhd:rF:N:L:"
PROGNAME=`basename $0`
PDFTK=1

WORKDIR=''
SRCFILE=''
DSTFILE=''
TITLE=''
AUTHOR='KDCONV'
TESSLNG='jpn'
FONTPATH='/usr/share/fonts/truetype/takao-gothic/TakaoPGothic.ttf'
FONTNAME='TakaoPGothic'
THREAD='4'
KDCFGDIR='/usr/local/etc/kdconv'
TESSCUST='tess.cfg'

usage()
{
    cat<<EOM 1>&2
usage: ${PROGNAME} [OPTION] input-pdf output-pdf

EOM
    if [ ${PDFTK} -eq 1 ]; then
	cat<<EOM 1>&2
  -a <AUTHOR>       set PDF author
EOM
    fi
    cat<<EOM 1>&2
  -r		    ocr scanning (test by tesseract-ocr 3.0.2. system ubuntu 12.10 only!)
	  -F                OCR background font abosolute place.(Default /usr/share/fonts/truetype/takao-gothic/TakaoPGothic.ttf)
	  -N                OCR background font name.(Default TakaoPGothic)
	  -L		    OCR scanning language.(Default jpn)
  -b                convert to B&W image instead of Grayscale.
  -c                copy if convert finished.
  -e                eject if copy finished.
  -f <DEVICEFORMAT> set format type. {kindle|kindledx|sonyreader|prs|paperwhite}
  -o                overwrite output-pdf if already exits.
  -p <DEVICEDOCDIR> Kindle doc directory path.
  -t                try to trim extra space.
  -v                show version
EOM
}

version()
{
    cat <<EOM
${PROGNAME} ${VERSION}
Copyright (c) 2010, MIYOKAWA, Nobuyoshi
and dirty fork Copyright(c) 2012,2013 Shin HATTORI
EOM
}

err()
{
    local _status=$1; shift
    echo "${PROGNAME}: $@" 1>&2
    exit ${_status}
}

warn()
{
    echo "${PROGNAME}: $@" 1>&2
}

create_workdir()
{
    WORKDIR=`mktemp -d -t ${PROGNAME}.XXXXXXXXXX`
    [ $? -eq 0 ] || err 1 "Can't create temp dir"
}

cleanup()
{
    if [ ${KEEPWORKDIR} -eq 0 ]; then
	rm -rf ${WORKDIR}
    fi
}

prepare()
{
    PDFTK=1
    if ! /usr/bin/which pdftk > /dev/null ; then
	PDFTK=0
	OPTIONS=`echo ${OPTIONS} | sed 's/a//'`
    fi
    if [ ${DX} -eq 1 ]; then
	DEVICETYPE="kindledx"
    fi
}

parseopt()
{
    local _dstbase
    while getopts ${OPTIONS} opt "$@"; do
	case ${opt} in
	    a)
		AUTHOR="${OPTARG}"
		;;
            b)
		BILEVEL=1
		;;
            c)
		COPY=1
		;;
            d)
                warn "Warning: -d option is obsolete.  try to use -f"
                DEVICETYPE="kindledx"
                ;;
            e)
		EJECT=1
		;;
            f)
                DEVICETYPE="${OPTARG}"
                ;;
            o)
		OVERWRITE=1
		;;
            p)
		DEVICEDOCPATH="${OPTARG}"
		;;
            r)
                OCR=1
                ;;
            t)
		TRIM=1
		;;
            v)
		version
		exit 0
		;;
            D)
		DEBUG=1
		;;
            F)
                FONTPATH="${OPTARG}"
                ;;
	    N)
		FONTNAME="${OPTARG}"
		;;
            K)
		KEEPWORKDIR=1
		;;
	    *)
		usage; exit 0
		;;
	esac
    done
    shift $((${OPTIND}-1))

    if [ $# != 2 ]; then
	usage
        exit 2
    fi

    case ${DEVICETYPE} in
	kindle)
	    PAPERSIZE_X=${KINDLE_PAPERSIZE_X}
	    PAPERSIZE_Y=${KINDLE_PAPERSIZE_Y}
	    [ ${DEVICEDOCPATH}x = x ] && DEVICEDOCPATH=${KINDLE_DEVICEPATH}
	    ;;
	kindledx)
	    PAPERSIZE_X=${KINDLEDX_PAPERSIZE_X}
	    PAPERSIZE_Y=${KINDLEDX_PAPERSIZE_Y}
	    [ ${DEVICEDOCPATH}x = x ] && DEVICEDOCPATH=${KINDLEDX_DEVICEPATH}
	    ;;
	sonyreader)
	    PAPERSIZE_X=${SONYREADER_PAPERSIZE_X}
	    PAPERSIZE_Y=${SONYREADER_PAPERSIZE_Y}
	    [ ${DEVICEDOCPATH}x = x ] && DEVICEDOCPATH=${SONYREADER_DEVICEPATH}
	    ;;
        prs)
            PAPERSIZE_X=${PRS_PAPERSIZE_X}
            PAPERSIZE_Y=${PRS_PAPERSIZE_Y}
	    PDF_DPI=167
            [ ${DEVICEDOCPATH}x = x ] && DEVICEDOCPATH=${PRS_DEVICEPATH}
            ;;
        paperwhite)
            PAPERSIZE_X=${PAPERWHITE_PAPERSIZE_X}
            PAPERSIZE_Y=${PAPERWHITE_PAPERSIZE_Y}
            PDF_DPI=212
	    ;;
	*)
	    err 1 "Unsupported format type: ${DEVICETYPE}"
	    ;;
    esac

    SRCFILE=$(cd "$(dirname "${1}")" && pwd)/$(basename "${1}")
    [ -e "${SRCFILE}" ] || err 1 "No such file: ${SRCFILE}"
    DSTFILE=$(cd "$(dirname "${2}")" && pwd)/$(basename "${2}")
    [ ${OVERWRITE} -eq 1 -o ! -e "${DSTFILE}" ] \
      || err 1 "Already exist: ${DSTFILE}"
    if [ ${COPY} -eq 1 ]; then
	if [ ! -d "${DEVICEDOCPATH}" ]; then
	    warn "Warning: Kindle is not connected."
	    COPY=0
	else
            DEVICEDOCPATH=$(cd "$DEVICEDOCPATH" && pwd)
	fi
    fi

    _dstbase=$(basename "${2}")
    TITLE=${_dstbase%.pdf}
}

slice()
{
	echo -n 'PDF slicing ...'
    gs \
	-dSAFER \
	-dBATCH \
	-dNOPAUSE \
	-r${GS_DPI} \
	-sDEVICE=png16m \
	 -dGraphicsAlphaBits=4 \
	-dMaxStripSize=8192 \
	-sOutputFile="${PROGNAME}.%04d.png" \
	-q \
	"${SRCFILE}"
	echo ' Done!'
}

convandocr()
{
    local _papersize="${PAPERSIZE_X}x${PAPERSIZE_Y}" _trim="" \
#          _imagetype="Grayscale"
    [ ${TRIM} -eq 0 ] || _trim="-fuzz 65% -trim +repage"
    [ ${BILEVEL} -eq 0 ] || _imagetype="Bilevel"

    echo -n 'Resizing Image ....'
    if [ $OCR -eq 1 ] ; then
    find . -name "*.png" -print0 | perl -pe 's/\.png\0/\0/g' | xargs -0 -L 100 -P ${THREAD} -I%  \
	convert \
	    %.png \
	    -filter Point \
	    -type GrayscaleMatte \
	    -units PixelsPerInch \
            -define pdf:use-cropbox=true \
            -define pdf:use-trimbox=true \
	    -density ${PDF_DPI} \
	    ${_trim} \
	    -adaptive-resize ${_papersize} \
	    -gravity center \
            -extent ${_papersize} \
            -page ${_papersize} \
            -draw 'point 0,0' \
            -draw "point $((${PAPERSIZE_X}-1)),$((${PAPERSIZE_Y}-1))" \
	    %.front.pdf 

    echo 'Done !'

    echo -n 'OCR scanning ...'
    find . -name "*.png" -print0 | perl -pe 's/\.png\0/\0/g' | xargs -0 -L 100 -P ${THREAD} -I% \
            tesseract \
            %.png \
            % \
            -l ${TESSLNG} \
            ${KDCFGDIR}/${TESSCUST}
    echo 'Done !'
    else
    find . -name "*.png" -print0 | perl -pe 's/\.png\0/\0/g' | xargs -0 -L 100 -P ${THREAD} -I%  \
        convert \
            %.png \
	    -filter Point \
	    -type GrayscaleMatte \
	    -units PixelsPerInch \
	    -define pdf:use-cropbox=true \
	    -define pdf:use-trimbox=true \
            -density ${PDF_DPI} \
            ${_trim} \
            -adaptive-resize  ${_papersize} \
            -gravity center \
            -extent ${_papersize} \
            -page ${_papersize} \
            -draw 'point 0,0' \
            -draw "point $((${PAPERSIZE_X}-1)),$((${PAPERSIZE_Y}-1))" \
            %.pdf
    echo 'Done !'
    fi

}

join()
{
    echo 'concatinating pdf pages.'

    if [ ${PDFTK} -eq 1 ] ; then
#	cat <<EOF>PDF_INFO
#InfoKey: Title
#InfoValue: ${TITLE}
#InfoKey: Author
#InfoValue: ${AUTHOR}
#EOF
	if [ $OCR -eq 1 ] ; then
		echo -n 'Generating seracable text ... '
		find . -name "*.txt" -print0 | perl -pe 's/\.txt\0/\0/g' | xargs -0 -L 100 -P ${THREAD} -I% \
		text.py %.txt %.back.pdf $FONTPATH $FONTNAME
		echo 'Done!'
		echo -n 'Merging seracable text ... '
		find . -name "*.front.pdf" -print0 | perl -pe 's/\.front.pdf\0/\0/g' | xargs -0 -L 100 -P ${THREAD} -I% \
		pdftk %.front.pdf background %.back.pdf output %.pdf
		echo 'Done!'
		rm *.front.pdf *.back.pdf *.txt *.png 
	fi
	echo -n 'Joint PDF Page ...'
	pdftk *.pdf output "${DSTFILE}.joined"
	title.py -f ${DSTFILE}.joined -o ${DSTFILE} -t ${TITLE} -s ${TITLE} -a ${AUTHOR} -c ${AUTHOR}
	rm ${DSTFILE}.joined
	echo 'Done!'
    else
	"${JOINPY}" --output "${DSTFILE}" *.pdf
    fi
}

copy()
{
    local _target=`basename ${DSTFILE}`

    [ ${COPY} -eq 1 ] || return
    if [ ${OVERWRITE} -eq 0 -a -e "${DEVICEDOCPATH}/${_target}" ]; then
	warn "Warning: Already exist on Kindle: ${_target}" 1>&2
	return
    fi

    cp "${DSTFILE}" "${DEVICEDOCPATH}"/
    [ ${EJECT} -eq 1 ] || return
    diskutil eject /Volumes/Kindle
}

d()
{
    [ ${DEBUG} -eq 1 ] || return

    cat<<EOF 1>&2
SRCFILE: ${SRCFILE}
DSTFILE: ${DSTFILE}
WORKDIR: ${WORKDIR}
PAPERSIZE_X: ${PAPERSIZE_X}
PAPERSIZE_Y: ${PAPERSIZE_Y}
TITLE: ${TITLE}
AUTHOR: ${AUTHOR}
BILEVEL: ${BILEVEL}
COPY: ${COPY}
EJECT: ${EJECT}
OVERWRITE: ${OVERWRITE}
KEEPWORKDIR: ${KEEPWORKDIR}
DEVICEDOCPATH: ${DEVICEDOCPATH}
PDFTK: ${PDFTK}
EOF
   set -o xtrace

}

main()
{
    prepare
    parseopt "$@"
    create_workdir
    d

    trap 'cleanup; exit 1' 1 2 3 15
    (cd ${WORKDIR}; \
	slice; \
	convandocr; \
	join; \
	copy; \
    )

    cleanup
}

main "$@"

# EOF
